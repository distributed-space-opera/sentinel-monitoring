# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import node_pb2 as node__pb2


class NodeCommunicationStub(object):
    """this would be implemented on the leader side
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.updateLeader = channel.unary_unary(
                '/stream1.NodeCommunication/updateLeader',
                request_serializer=node__pb2.updateLeaderRequest.SerializeToString,
                response_deserializer=node__pb2.updateLeaderResponse.FromString,
                )
        self.proposeLeader = channel.unary_unary(
                '/stream1.NodeCommunication/proposeLeader',
                request_serializer=node__pb2.proposeLeaderRequest.SerializeToString,
                response_deserializer=node__pb2.proposeLeaderResponse.FromString,
                )
        self.GetNodes = channel.unary_unary(
                '/stream1.NodeCommunication/GetNodes',
                request_serializer=node__pb2.GetListOfNodesRequest.SerializeToString,
                response_deserializer=node__pb2.GetListOfNodesResponse.FromString,
                )
        self.updateNodeMonitorList = channel.unary_unary(
                '/stream1.NodeCommunication/updateNodeMonitorList',
                request_serializer=node__pb2.nodeList.SerializeToString,
                response_deserializer=node__pb2.updateNodeListResponse.FromString,
                )
        self.checkLeader = channel.unary_unary(
                '/stream1.NodeCommunication/checkLeader',
                request_serializer=node__pb2.generalPingRequest.SerializeToString,
                response_deserializer=node__pb2.generalResponse.FromString,
                )
        self.setLeader = channel.unary_unary(
                '/stream1.NodeCommunication/setLeader',
                request_serializer=node__pb2.newLeaderRequest.SerializeToString,
                response_deserializer=node__pb2.newLeaderResponse.FromString,
                )
        self.checkMonitor = channel.unary_unary(
                '/stream1.NodeCommunication/checkMonitor',
                request_serializer=node__pb2.generalPingRequest.SerializeToString,
                response_deserializer=node__pb2.generalResponse.FromString,
                )


class NodeCommunicationServicer(object):
    """this would be implemented on the leader side
    """

    def updateLeader(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def proposeLeader(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNodes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateNodeMonitorList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def checkLeader(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setLeader(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def checkMonitor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NodeCommunicationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'updateLeader': grpc.unary_unary_rpc_method_handler(
                    servicer.updateLeader,
                    request_deserializer=node__pb2.updateLeaderRequest.FromString,
                    response_serializer=node__pb2.updateLeaderResponse.SerializeToString,
            ),
            'proposeLeader': grpc.unary_unary_rpc_method_handler(
                    servicer.proposeLeader,
                    request_deserializer=node__pb2.proposeLeaderRequest.FromString,
                    response_serializer=node__pb2.proposeLeaderResponse.SerializeToString,
            ),
            'GetNodes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNodes,
                    request_deserializer=node__pb2.GetListOfNodesRequest.FromString,
                    response_serializer=node__pb2.GetListOfNodesResponse.SerializeToString,
            ),
            'updateNodeMonitorList': grpc.unary_unary_rpc_method_handler(
                    servicer.updateNodeMonitorList,
                    request_deserializer=node__pb2.nodeList.FromString,
                    response_serializer=node__pb2.updateNodeListResponse.SerializeToString,
            ),
            'checkLeader': grpc.unary_unary_rpc_method_handler(
                    servicer.checkLeader,
                    request_deserializer=node__pb2.generalPingRequest.FromString,
                    response_serializer=node__pb2.generalResponse.SerializeToString,
            ),
            'setLeader': grpc.unary_unary_rpc_method_handler(
                    servicer.setLeader,
                    request_deserializer=node__pb2.newLeaderRequest.FromString,
                    response_serializer=node__pb2.newLeaderResponse.SerializeToString,
            ),
            'checkMonitor': grpc.unary_unary_rpc_method_handler(
                    servicer.checkMonitor,
                    request_deserializer=node__pb2.generalPingRequest.FromString,
                    response_serializer=node__pb2.generalResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'stream1.NodeCommunication', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NodeCommunication(object):
    """this would be implemented on the leader side
    """

    @staticmethod
    def updateLeader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stream1.NodeCommunication/updateLeader',
            node__pb2.updateLeaderRequest.SerializeToString,
            node__pb2.updateLeaderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def proposeLeader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stream1.NodeCommunication/proposeLeader',
            node__pb2.proposeLeaderRequest.SerializeToString,
            node__pb2.proposeLeaderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stream1.NodeCommunication/GetNodes',
            node__pb2.GetListOfNodesRequest.SerializeToString,
            node__pb2.GetListOfNodesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateNodeMonitorList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stream1.NodeCommunication/updateNodeMonitorList',
            node__pb2.nodeList.SerializeToString,
            node__pb2.updateNodeListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def checkLeader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stream1.NodeCommunication/checkLeader',
            node__pb2.generalPingRequest.SerializeToString,
            node__pb2.generalResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setLeader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stream1.NodeCommunication/setLeader',
            node__pb2.newLeaderRequest.SerializeToString,
            node__pb2.newLeaderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def checkMonitor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stream1.NodeCommunication/checkMonitor',
            node__pb2.generalPingRequest.SerializeToString,
            node__pb2.generalResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
